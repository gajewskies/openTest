#include "openTest.h"
#include <iostream>

using namespace std;

void tests::autoLog(const char * status)
{
	cout << status << endl;
}

void tests::newTest(const char *function, const char *testName)
{
	cout << function << " " << testName;
}

bool tests::EXPECT_TRUE(bool condition)
{
	if (condition)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

bool tests::ASSERT_TRUE(bool condition)
{
	if (condition)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}

bool tests::EXPECT_FALSE(bool condition)
{
	if (condition)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

bool tests::ASSERT_FALSE(bool condition)
{
	if (condition)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}
template <typename type>
bool  tests::EXPECT_EQUAL(type a, type b)
{
	if (a == b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

template <typename type>
bool tests::EXPECT_NOT_EQUAL(type a, type b)
{
	if (a != b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

template <typename type>
bool tests::EXPECT_LESS_THAN(type a, type b)
{
	if (a < b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

template <typename type>
bool tests::EXPECT_LESS_THAN_EQ(type a, type b)
{
	if (a <= b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

template <typename type>
bool tests::EXPECT_GREATER_THAN(type a, type b)
{
	if (a > b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}

template <typename type>
bool tests::EXPECT_GREATER_THAN_EQ(type a, type b)
{
	if (a >= b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		return false;
	}
}


template <typename type>
bool  tests::ASSERT_EQUAL(type a, type b)
{
	if (a == b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}

template <typename type>
bool tests::ASSERT_NOT_EQUAL(type a, type b)
{
	if (a != b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}

template <typename type>
bool tests::ASSERT_LESS_THAN(type a, type b)
{
	if (a < b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}

template <typename type>
bool tests::ASSERT_LESS_THAN_EQ(type a, type b)
{
	if (a <= b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}

template <typename type>
bool tests::ASSERT_GREATER_THAN(type a, type b)
{
	if (a > b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}

template <typename type>
bool tests::ASSERT_GREATER_THAN_EQ(type a, type b)
{
	if (a >= b)
	{
		autoLog("[ PASS ]");
		return true;
	}
	else
	{
		autoLog("[ FAIL ]");
		exit(1);
		return false;
	}
}


int addition(int a, int b)
{
	return a + b;
}

int main()
{
	tests::newTest("Addition", "CanAddTwoNumbers");
	{
		tests::ASSERT_EQUAL(2, addition(1, 1));
	}

	tests::newTest("bool", "ShouldBeTrue");
	{
		tests::EXPECT_TRUE(1 == 1);
	}

	tests::newTest("bool", "ShouldNotEqual");
	{
		tests::EXPECT_FALSE(1 != 0);
	}

	tests::EXPECT_EQUAL(1, 1);
	
	return 0;
}
