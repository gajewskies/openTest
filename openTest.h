#pragma once
#ifndef _OPEN_TEST_H
#define _OPEN_TEST_H

#include <iostream>
#include <cstdlib>

using namespace std;

namespace tests
{
	void autoLog(const char * status)
	{
		cout << status << endl;
	}

	void newTest(const char *function, const char *testName)
	{
		cout << function << " " << testName;
	}

	bool EXPECT_TRUE(bool condition)
	{
		if (condition)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	bool ASSERT_TRUE(bool condition)
	{
		if (condition)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}

	bool EXPECT_FALSE(bool condition)
	{
		if (condition)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	bool ASSERT_FALSE(bool condition)
	{
		if (condition)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}
	template <typename type>
	bool  EXPECT_EQUAL(type a, type b)
	{
		if (a == b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	template <typename type>
	bool EXPECT_NOT_EQUAL(type a, type b)
	{
		if (a != b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	template <typename type>
	bool EXPECT_LESS_THAN(type a, type b)
	{
		if (a < b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	template <typename type>
	bool EXPECT_LESS_THAN_EQ(type a, type b)
	{
		if (a <= b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	template <typename type>
	bool EXPECT_GREATER_THAN(type a, type b)
	{
		if (a > b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}

	template <typename type>
	bool EXPECT_GREATER_THAN_EQ(type a, type b)
	{
		if (a >= b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			return false;
		}
	}


	template <typename type>
	bool ASSERT_EQUAL(type a, type b)
	{
		if (a == b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}

	template <typename type>
	bool ASSERT_NOT_EQUAL(type a, type b)
	{
		if (a != b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}

	template <typename type>
	bool ASSERT_LESS_THAN(type a, type b)
	{
		if (a < b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}

	template <typename type>
	bool ASSERT_LESS_THAN_EQ(type a, type b)
	{
		if (a <= b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}

	template <typename type>
	bool ASSERT_GREATER_THAN(type a, type b)
	{
		if (a > b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}

	template <typename type>
	bool ASSERT_GREATER_THAN_EQ(type a, type b)
	{
		if (a >= b)
		{
			autoLog("[ PASS ]");
			return true;
		}
		else
		{
			autoLog("[ FAIL ]");
			exit(1);
			return false;
		}
	}
};

#endif /* _OPEN_TEST_H */
